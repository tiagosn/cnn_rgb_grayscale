import os

import numpy as np

from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator

from all_conv_cnn import *
from simple_cnn import *
from utils import *

def train_cifar10(model_type='simple', rgb=True, n_gray_colors=None):
    batch_size = 32
    num_classes = 10
    epochs = 100
    
    save_dir = os.path.join(os.getcwd(), 'saved_models')
    model_name = '%s_cifar10_%s.h5' % (model_type, ('rgb' if rgb else 'gray'+str(n_gray_colors)))

    # load cifar-10
    (X_train, y_train), (X_test, y_test) = cifar10.load_data()

    # convert class vectors to binary class matrices.
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)

    im_shape = None
    if rgb:
        im_shape = (32, 32, 3)
        X_train = X_train.astype('float32')
        X_test = X_test.astype('float32')
        X_train /= 255
        X_test /= 255
    else:
        im_shape = (32, 32, 1)
        X_train = as_quantized_double_gray(X_train, n_gray_colors)
        X_test = as_quantized_double_gray(X_test, n_gray_colors)

    print('X_train shape:', X_train.shape)
    print(X_train.shape[0], 'train samples')
    print(X_test.shape[0], 'test samples')
        
    # this will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model = None
    if model_type == 'simple':
        model = create_simple_cnn(im_shape, 10)
    elif model_type == 'all_conv':
        model = create_all_conv_net_ref_c(im_shape, 10)
    
    model.fit_generator(datagen.flow(X_train, y_train,
                                     batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(X_test, y_test),
                        workers=4)

    # save model and weights
    if not os.path.isdir(save_dir):
        os.makedirs(save_dir)
    model_path = os.path.join(save_dir, model_name)
    model.save(model_path)
    print('Saved trained model at %s ' % model_path)

    # score trained model
    scores = model.evaluate(X_test, y_test, verbose=1)
    print('Test loss:', scores[0])
    print('Test accuracy:', scores[1])


models = ['all_conv']
n_colors = [256, 128, 64, 32, 16, 8]

for m in models:
    # train rgb model
    train_cifar10(model_type=m, rgb=True, n_gray_colors=None)

    # train grayscale models
    for n in n_colors:
        train_cifar10(model_type=m, rgb=False, n_gray_colors=n)
